# EXAMPLE OF AJAX REQUEST
import requests
import http.cookiejar
import urllib.parse

import json 
import re
import hashlib
# super useful time.sleep 
import time

# define an entry point to retrieve all the cookies and info
BASE_URL = 'https://www.instagram.com'
MID_URL = 'https://www.instagram.com/web/__mid/'
LOGIN_URL = 'https://www.instagram.com/accounts/login/ajax/'
COMMENT_BY_ID = 'https://www.instagram.com/graphql/query/?query_hash=97b41c52301f77ce508f55e66d17620e&variables=%s'


# define your user and password
user = "USER"
passw = "PASSW"
# define a session 
req = requests.Session() 
# and here we have one of the most important things ever in scraping: the User Agent!
# speak about network condition in the inspection module
user_agent = 'Instagram 126.0.0.25.121 Android (23/6.0.1; 320dpi; 720x1280; samsung; SM-A310F; a3xelte; samsungexynos7580; en_GB; 110937453)'
# hit the end point
response = req.get(BASE_URL)
print(response.status_code)
# from here we can start to extract the csrf_token 
#A CSRF token is a unique, secret, unpredictable value that is generated by the server-side application
#  and transmitted to the client in such a way that it is included in a subsequent HTTP request
#  made by the client. When the later request is made, 
# the server-side application validates that the request includes the expected token and rejects 
# the request if the token is missing or invalid.
# the CSRF token is from the headers response when visiting the homepage
csrfToken = re.findall(r'"csrf_token":"(.*?)"', response.text)[0]
# get the cookies 
# the mid is the session user id
cookies = response.cookies.get_dict()
mid = req.get(MID_URL)
# create the headers 
headers = {
            'cookie': f"ig_cb=1; csrftoken={csrfToken}; mid={mid};",
            'referer': BASE_URL + '/',
            'x-csrftoken': csrfToken,
            'X-CSRFToken': csrfToken,
            'user-agent': user_agent,
            }
# create a payload as we going to run a post request 
payload = {'username': user,
          'enc_password': f"#PWD_INSTAGRAM_BROWSER:0:{int(time.time())}:{passw}"}
# login in action 
response_login = req.post(LOGIN_URL, data=payload, headers=headers)            
print(response_login.status_code)
# save the obtained cookies 
cookies = response_login.cookies.get_dict() 
# for example 
#{'csrftoken': 'NPngGboCbltPZMf0',
# 'ds_user_id': '359130519039150190',
# 'mid': 'YlGPLgABAAEqGs0Q0397WxQ3jCfGEg',
# 'rur': 'LDC',
# 'sessionid': '39r109090j%%3A7'}
# add the mid value 
cookies['mid'] = mid 
# now generate the headers, that will be useful for fetching comments etc 
# part of the headers has cookies in the form: name=value so 
headers_cookies = "" 
for key in cookies.keys():
    headers_cookies += f"{key}={cookies[key]}; "
# add the csrftoken 
csrftoken = cookies['csrftoken']
headers = {"cookie": headers_cookies, 
           "referer": BASE_URL + "/",
           "x-csrftoken": csrftoken, 
           "user-agent": user_agent
          }
# NOW WE HAVE EVERYTHING TO SCRAPE COMMENTS from --> https://www.instagram.com/p/Cb7oQGnsNwA/
comments = []
code = "CdM4PR1rGNC" # https://www.instagram.com/p/CdM4PR1rGNC/
has_previous = True 
# AJAX SCRAPING
while has_previous: 
    variables = { "shortcode": code, 
                  "first": 10, #number of comments to receive
                  "after": ''
                }
    comments_url = COMMENT_BY_ID  % urllib.parse.quote_plus(json.dumps(variables, separators=(',', ':')))
    # now we're dealing with comments, we need tocreate the rhx gis 
    print(comments_url)
    time.sleep(10)
    try:
        array = re.findall(r'_sharedData = .*?;</script>', response_login.text)
        raw_json = json.loads(array[0][len("_sharedData ="):-len(";</script>")])
        rhx_gis = raw_json['rhx_gis']
    except:
        # hash the gis 
        rhx_gis = 'NULL'
        string_to_hash = ':'.join([rhx_gis, json.dumps(variables, separators=(',', ':')) ])
        gis_token = hashlib.md5(string_to_hash.encode('utf-8')).hexdigest()
    # from the login session we can now move to comments 
    # add the rhx_gis
    headers['x-instagram-gis'] = gis_token
    response_comments = req.get(comments_url, headers=headers)
    print(response_comments.status_code)
    json_response = response_comments.json()
    print(json_response)
    has_previous = False
    time.sleep(2)